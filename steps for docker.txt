1) Install docker
  Follow these steps https://docs.docker.com/install/linux/docker-ce/debian/

2) Install and run ElasticSearch
  https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html

  $ docker pull docker.elastic.co/elasticsearch/elasticsearch:6.4.3
  
  There is no need to open the TCP ports as the other containers will use the docker bridge interface to contact Elasticsearch.
  $ docker run -d  --name elasticsearch -e "discovery.type=single-node" docker.elastic.co/elasticsearch/elasticsearch:6.4.3
  (add -d to run the image in detached mode.)

  $ docker run curl localhost:9200
  {
    "name" : "-RAvpJ5",
    "cluster_name" : "docker-cluster",
    "cluster_uuid" : "0DZTV2FDSzyIUUDBbxuGCw",
    "version" : {
      "number" : "6.4.3",
      "build_flavor" : "default",
      "build_type" : "tar",
      "build_hash" : "04711c2",
      "build_date" : "2018-09-26T13:34:09.098244Z",
      "build_snapshot" : false,
      "lucene_version" : "7.4.0",
      "minimum_wire_compatibility_version" : "5.6.0",
      "minimum_index_compatibility_version" : "5.0.0"
    },
    "tagline" : "You Know, for Search"
  }

3) Install Kibana
  https://www.elastic.co/guide/en/kibana/current/docker.html
  
  $ sudo docker pull docker.elastic.co/kibana/kibana:6.4.3
  
  https://docs.docker.com/samples/library/kibana/#running-in-development-mode
  $ docker run -d --name kibana --link "elasticsearch:elasticsearch" -p 5601:5601 docker.elastic.co/kibana/kibana:6.4.3
  
  $ sudo docker ps
CONTAINER ID        IMAGE                                                 COMMAND                  CREATED              STATUS              PORTS                                            NAMES
776e51941216        docker.elastic.co/elasticsearch/elasticsearch:6.4.3   "/usr/local/bin/dock…"   5 seconds ago        Up 4 seconds        9200/tcp, 9300/tcp   				elasticsearch
826e2b8b7817        docker.elastic.co/kibana/kibana:6.4.3                 "/usr/local/bin/kiba…"   About a minute ago   Up About a minute   0.0.0.0:5601->5601/tcp                	      kibana
  
  $ curl localhost:5601
<script>var hashRoute = '/app/kibana';
var defaultRoute = '/app/kibana';

var hash = window.location.hash;
if (hash.length) {
  window.location = hashRoute + hash;
} else {
  window.location = defaultRoute;
}</script>


$ docker network inspect bridge
[
    {
        "Name": "bridge",
        "Id": "abfadc2da70761c504878e7031c513caf71b4ce9052dc78c6a459de758e5cce8",
        "Created": "2018-10-12T19:43:23.402133616Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": null,
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "2fb0d212ba72c330750c234969e6b31750a4ac63bc1de8dda642b62225368b7c": {
                "Name": "elasticsearch",
                "EndpointID": "6dfa4bd39ba3870615f2aeb6d1ac5dc45949a4165dcdbe0df02d0e663b1b4da1",
                "MacAddress": "02:42:ac:11:00:02",
                "IPv4Address": "172.17.0.2/16",
                "IPv6Address": ""
            },
            "52e6f5406159ee399ed2b59a4540e2cd68c0c1351ec89eab0ca69064c369723d": {
                "Name": "kibana",
                "EndpointID": "912217e5d01dfa24084df3867e244ab446f0eda205f5f12313e75b1878ba87c0",
                "MacAddress": "02:42:ac:11:00:03",
                "IPv4Address": "172.17.0.3/16",
                "IPv6Address": ""
            }
        },
        "Options": {
            "com.docker.network.bridge.default_bridge": "true",
            "com.docker.network.bridge.enable_icc": "true",
            "com.docker.network.bridge.enable_ip_masquerade": "true",
            "com.docker.network.bridge.host_binding_ipv4": "0.0.0.0",
            "com.docker.network.bridge.name": "docker0",
            "com.docker.network.driver.mtu": "1500"
        },
        "Labels": {}
    }
]  


In order to configure logstash and integrate it with Elasticsearch and Kibana, follow these steps:
- Inside /data/logs/logs, download and uncompress https://github.com/elastic/elk-index-size-tests/blob/master/logs.gz
- Have this file inside /pipeline/logstash.conf:
input
{
	file {
		path => "/usr/share/logstash/data/logs/logs"
		type => "logs"
		start_position => "beginning"
	}

}

filter
{
	grok{
		match => {
			"message" => "%{COMBINEDAPACHELOG}"
		}
	}
	mutate{
		convert => { "bytes" => "integer" }
	}
	date {
		match => [ "timestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
		locale => en
		remove_field => "timestamp"
	}
	geoip {
		source => "clientip"
	}
	useragent {
		source => "agent"
		target => "useragent"
	}
}


output
{
	stdout {
		codec => dots
	}

 	elasticsearch {
		hosts => ["http://elasticsearch:9200"]
  	}

}


- run the container
$ docker run -d --name logstash --link "elasticsearch:elasticsearch" -v ~/proyectos/elk-docker/logstash/pipeline/:/usr/share/logstash/pipeline/ -v ~/proyectos/elk-docker/logstash/data/logs/:/usr/share/logstash/data/logs/  docker.elastic.co/logstash/logstash:6.4.3

When we allow for Syslog input, add the parameter  -p 5140:5140.
TCP port 514 will not work as logstash does not have root privileges to start ports < 1024.


Steps for basic auth on Kibana:
When you access Kibana the requests actually go through NGINX.
$ docker run -d --name kibana --link "elasticsearch:elasticsearch" docker.elastic.co/kibana/kibana:6.4.3

$ docker run -d --name nginx --link "kibana:kibana" -p 5160:5160 nginx

Enter the nginx container's interactive shell:
$ docker exec -it nginx /bin/bash

Get the htpasswd tool:
# apt-get update
# apt-get install apache2-utils -y

Create the user on the nginx container:
# htpasswd -c /etc/nginx/htpasswd.kibanauser admin
New password:
Re-type new password:
Adding password for user admin

Add this to /etc/nginx/nginx.conf:
(I like the nano editor: apt-get install nano -y)
server {
	listen 5601;
	server_name kibana;
	auth_basic "Restricted Access";
	auth_basic_user_file /etc/nginx/htpasswd.kibanauser;
	location / {
		proxy_pass http://kibana:5601;
		proxy_http_version 1.1;
		proxy_set_header Upgrade $http_upgrade;
		proxy_set_header Connection "upgrade";
		proxy_set_header Host $host;
		proxy_cache_bypass $http_upgrade;
	}
}


